#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Net::Address::IP::Local;
use File::Temp qw(tmpnam);
use IO::File;
use DateTime;
use Data::Dumper;

my $destip;


my $ok = GetOptions(
    'dest=s' => \$destip,
    );


if( not $ok or not $destip or scalar(@ARGV) > 0 or $destip !~ /^[0-9.]+$/ )
{
    print STDERR "Usage: $0 --dest=IPADDR\n",
    "Options:\n",
    "  --dest=IPADDR   other end probe address\n";
    exit(1);
}

my $localip = Net::Address::IP::Local->public_ipv4();

my $remote_file = tmpnam();

my $remotepid = fork();
if( $remotepid == 0 )
{
    my $sshcmd =
        'ssh' .
        ' -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' .
        ' root@' . $destip . ' ';
    
    my $dumpfile = '/tmp/' . $localip . '_' . time();
    
    system($sshcmd .
           'timeout 40 /usr/sbin/tcpdump -p -q -w ' . $dumpfile .
           ' ip host ' . $localip . ' 2>/dev/null');
    
    system($sshcmd .
           'nice tshark -r ' . $dumpfile . ' -z rtp,streams -q >' .
           $remote_file . ' 2>/dev/null');

    system($sshcmd .
           'rm -f ' . $dumpfile . ' 2>/dev/null');
    
    exit(0);
}

my $local_file = tmpnam();
    
my $localpid = fork();
if( $localpid == 0 )
{
    my $dumpfile = '/tmp/' . $destip . '_' . time();
    
    system('timeout 40 /usr/sbin/tcpdump -p -q -w ' . $dumpfile .
           ' ip host ' . $destip . ' 2>/dev/null');
    
    system('nice tshark -r ' . $dumpfile . ' -z rtp,streams -q >' .
           $local_file . ' 2>/dev/null');

    unlink $dumpfile;

    exit(0);
}

sleep(3);

my $now = DateTime->now( time_zone => 'local' );

system('fs_cli -x \'perlrun /etc/freeswitch/scripts/probe.pl moh@' .
       $destip . ':5080\' >/dev/null');

waitpid($remotepid, 0);
waitpid($localpid, 0);

my %results =
    (
     'date' => $now->ymd,
     'time' => $now->hms,
    );


my $fh = IO::File->new($remote_file) or
    die("Failed opening $remote_file : $!");

while(my $line = $fh->getline())
{
    $line =~ s/^\s+//;
    my @parts = split(/\s+/, $line);
    
    if( $parts[0] eq $localip )
    {
        $results{'remote_packets'} = $parts[8];
        $results{'remote_lost'} = $parts[9];
        $results{'remote_max_jitter'} = $parts[12];
        $results{'remote_avg_jitter'} = $parts[13];
        
        last;
    }
}

$fh->close;

$fh = IO::File->new($local_file) or
    die("Failed opening $local_file : $!");

while(my $line = $fh->getline())
{
    $line =~ s/^\s+//;
    my @parts = split(/\s+/, $line);
    
    if( $parts[0] eq $destip )
    {
        $results{'local_packets'} = $parts[8];
        $results{'local_lost'} = $parts[9];
        $results{'local_max_jitter'} = $parts[12];
        $results{'local_avg_jitter'} = $parts[13];
        
        last;
    }
}

$fh->close;

unlink $remote_file;
unlink $local_file;

#print "Wrote $remote_file $local_file\n";
#print Dumper(\%results);

my @columns =
    (
     'date',
     'time',
     'remote_packets',
     'remote_lost',
     'remote_max_jitter',
     'remote_avg_jitter',
     'local_packets',
     'local_lost',
     'local_max_jitter',
     'local_avg_jitter',
    );
     

my $statfile =
    '/var/local/voip_probe/reports/' . $localip . '_' . $destip .
    '_' . $now->strftime('%Y%m%d');

my $printhead = (-f $statfile) ? 0:1;

$fh = IO::File->new($statfile, 'a') or
    die("Failed to open $statfile for writing: $!");

if( $printhead )
{
    $fh->print(join(',', @columns) . "\n");
}

my @res;
foreach my $col (@columns)
{
    my $val = $results{$col};
    $val = '' unless defined($val);
    push(@res, $val);
}

$fh->print(join(',', @res) . "\n");

$fh->close;

#print(join(',', @res) . "\n");

1;









